import os
from datetime import datetime, timedelta
from urllib.request import urlretrieve

from cumulus_geoproc.processors import geo_proc


class ProcessorResult:
    """A class to hold relevant information about an acquirable and productfiles generated by geo_proc()"""

    infile_basedir = "/src/tests/integration/fixtures"

    def __init__(self, processor, filepath, reasonable_min, reasonable_max, download_url=None):
        self.processor = processor
        self.infile = os.path.join(self.infile_basedir, filepath)
        self.output_directory = f"/output/{self.processor}"
        self.reasonable_min = reasonable_min
        self.reasonable_max = reasonable_max
        self.download_url = download_url
        # If specified input file does not exist, but a download url is provided
        # input file for testing probably too large to store in test data repository
        # download the file from the download_url on first test run
        if not os.path.isfile(self.infile) and download_url:
            self.download()
        self.result = self.process()  # Run geoprocessing

    def download(self):
        os.makedirs(os.path.dirname(self.infile), exist_ok=True)
        urlretrieve(self.download_url, self.infile)

    def process(self):
        try:
            os.makedirs(self.output_directory, exist_ok=True)
            return geo_proc(
                plugin=self.processor, src=self.infile, dst=self.output_directory
            )
        except:
            return []

    @property
    def min(self):
        # TODO: Return maximum gridcell value in all grids returned by process() to be used in integration tests
        # Can probably call gdalinfo -stats (or gdal python binding equivalent) to get min,max.
        pass

    @property
    def max(self):
        # TODO: Return minimum gridcell value in all grids returned by process() to be used in integration tests
        # Can probably call gdalinfo -stats (or gdal python binding equivalent) to get min,max.
        pass


def nbm_co_01h_fixture_info_factory(t_string, f_string):
    yesterday = datetime.utcnow() - timedelta(days=1)
    url_base = f"https://nomads.ncep.noaa.gov/pub/data/nccf/com/blend/prod/blend.{yesterday.strftime('%Y%m%d')}/{t_string}/core"
    filename = f"blend.t{t_string}z.core.f{f_string}.co.grib2"
    
    return ("nbm-co-01h", f"nbm-co-01h/{filename}", None, None, f"{url_base}/{filename}")


if __name__ == "__main__":
    pass